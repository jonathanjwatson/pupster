{"version":3,"sources":["containers/About.jsx","utils/API.js","containers/Discover.jsx","containers/Search.jsx","components/NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["About","Component","axios","get","Discover","state","imageURL","counter","style","image","maxWidth","height","getNewDog","API","then","response","console","log","data","setState","message","catch","err","handleThumbsUpClick","randomNumber","Math","floor","random","handleThumbsDownClick","this","className","src","alt","onClick","role","Search","NavBar","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"gOAYeA,E,uKARP,OACI,6BACI,2D,GAJIC,a,iBCAL,EACF,WACT,OAAOC,IAAMC,IAAI,4CC2FNC,E,4MA3FbC,MAAQ,CACNC,SAAU,GACVC,QAAS,G,EAGXC,MAAQ,CACNC,MAAO,CACLC,SAAU,MACVC,OAAQ,U,EAQZC,UAAY,WACVC,IACGC,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAASG,MACrB,EAAKC,SAAS,CACZb,SAAUS,EAASG,KAAKE,aAG3BC,OAAM,SAACC,GACNN,QAAQC,IAAIK,O,EAIlBC,oBAAsB,WACpB,IAAMC,EAAeC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EACrDX,QAAQC,IAAIO,GACS,IAAjBA,GACF,EAAKL,SAAS,CACZZ,QAAS,EAAKF,MAAME,QAAU,IAIlC,EAAKK,a,EAGPgB,sBAAwB,WACtB,EAAKhB,a,kEA7BLiB,KAAKjB,c,+BAiCL,OACE,yBAAKkB,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,mBACZD,KAAKxB,MAAMC,UACV,yBACEyB,IAAKF,KAAKxB,MAAMC,SAChB0B,IAAI,MACJxB,MAAOqB,KAAKrB,MAAMC,UAK1B,yBAAKqB,UAAU,OACb,yBAAKA,UAAU,iBACb,4BACEA,UAAU,iBACVG,QAASJ,KAAKD,uBAFhB,gBAOF,yBAAKE,UAAU,kBACb,4BACEA,UAAU,kBACVG,QAASJ,KAAKN,qBAFhB,eAQJ,yBAAKO,UAAU,OACb,yBAAKA,UAAU,OACZD,KAAKxB,MAAME,QAAU,GACpB,yBAAKuB,UAAU,kCAAkCI,KAAK,SAAtD,sBACsBL,KAAKxB,MAAME,QADjC,wB,GAjFSN,aCSRkC,E,uKARP,OACI,6BACI,6D,GAJKlC,aCyCNmC,EAxCA,WACb,OACE,yBAAKN,UAAU,iDACb,kBAAC,IAAD,CAAMO,GAAG,IAAIP,UAAU,gBAAvB,WAGA,4BACEA,UAAU,iBACVQ,KAAK,SACLC,cAAY,WACZC,cAAY,aACZC,gBAAc,YACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMb,UAAU,yBAElB,yBAAKA,UAAU,2BAA2Bc,GAAG,aAC3C,wBAAId,UAAU,cACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMO,GAAG,SAASP,UAAU,YAA5B,UAIF,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMO,GAAG,YAAYP,UAAU,YAA/B,aAIF,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMO,GAAG,UAAUP,UAAU,YAA7B,eCdGe,MAZf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWhD,IACjC,kBAAC,IAAD,CAAO8C,OAAK,EAACC,KAAK,SAASC,UAAWhD,IACtC,kBAAC,IAAD,CAAO8C,OAAK,EAACC,KAAK,YAAYC,UAAW5C,IACzC,kBAAC,IAAD,CAAO0C,OAAK,EAACC,KAAK,UAAUC,UAAWb,MCFzBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEd1C,OAAM,SAAA2C,GACLhD,QAAQgD,MAAMA,EAAM5C,c","file":"static/js/main.a1691bc2.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass About extends Component {\n    render() {\n        return (\n            <div>\n                <h1>This is my about page.</h1>\n            </div>\n        );\n    }\n}\n\nexport default About;\n","import axios from \"axios\";\n\nexport default {\n  getNewDog: function () {\n    return axios.get(\"https://dog.ceo/api/breeds/image/random\");\n  },\n};\n","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\n\nclass Discover extends Component {\n  state = {\n    imageURL: \"\",\n    counter: 0,\n  };\n\n  style = {\n    image: {\n      maxWidth: \"25%\",\n      height: \"300px\"\n    },\n  };\n\n  componentDidMount() {\n    this.getNewDog();\n  }\n\n  getNewDog = () => {\n    API.getNewDog()\n      .then((response) => {\n        console.log(response.data);\n        this.setState({\n          imageURL: response.data.message,\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  handleThumbsUpClick = () => {\n    const randomNumber = Math.floor(Math.random() * 5) + 1;\n    console.log(randomNumber);\n    if (randomNumber === 3) {\n      this.setState({\n        counter: this.state.counter + 1,\n      });\n    }\n\n    this.getNewDog();\n  };\n\n  handleThumbsDownClick = () => {\n    this.getNewDog();\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col text-center\">\n            {this.state.imageURL && (\n              <img\n                src={this.state.imageURL}\n                alt=\"pup\"\n                style={this.style.image}\n              ></img>\n            )}\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col text-left\">\n            <button\n              className=\"btn btn-danger\"\n              onClick={this.handleThumbsDownClick}\n            >\n              Thumbs Down\n            </button>\n          </div>\n          <div className=\"col text-right\">\n            <button\n              className=\"btn btn-success\"\n              onClick={this.handleThumbsUpClick}\n            >\n              Thumbs Up\n            </button>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            {this.state.counter > 0 && (\n              <div className=\"alert alert-primary text-center\" role=\"alert\">\n                You currently have {this.state.counter} dog friends!\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Discover;\n","import React, { Component } from 'react';\n\nclass Search extends Component {\n    render() {\n        return (\n            <div>\n                <h1>This is my search page. </h1>\n            </div>\n        );\n    }\n}\n\nexport default Search;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst NavBar = () => {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <Link to=\"/\" className=\"navbar-brand\">\n        Pupster\n      </Link>\n      <button\n        className=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarNav\"\n        aria-controls=\"navbarNav\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n      >\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n        <ul className=\"navbar-nav\">\n          <li className=\"nav-item\">\n            <Link to=\"/about\" className=\"nav-link\">\n              About\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link to=\"/discover\" className=\"nav-link\">\n              Discover\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link to=\"/search\" className=\"nav-link\">\n              Search\n            </Link>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport About from \"./containers/About\";\nimport Discover from \"./containers/Discover\";\nimport Search from \"./containers/Search\";\nimport NavBar from \"./components/NavBar\";\n\nfunction App() {\n  return (\n    <Router>\n      <NavBar />\n      <Route exact path=\"/\" component={About} />\n      <Route exact path=\"/about\" component={About} />\n      <Route exact path=\"/discover\" component={Discover} />\n      <Route exact path=\"/search\" component={Search} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}